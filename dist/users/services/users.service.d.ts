import { ConfigService } from '@nestjs/config';
import { TokenService } from 'src/auth/services/token.service';
import { CardsService } from 'src/cards/services/cards.service';
import { UserDocument } from 'src/core/entities/document.entity';
import { User } from 'src/core/entities/user.entity';
import { KycVerificationStatus } from 'src/core/enum/kyc-verification-status.enum';
import { MerchantClientService } from 'src/integration/busybox/external-system-client/merchant-client.service';
import { WalletService } from 'src/wallet/services/wallet.service';
import { DataSource, EntityManager, QueryRunner, Repository } from 'typeorm';
import { UpdateKycDetailUploadDto } from '../dto/user-kyc-upload.dto';
import { UserAdminRequestDto, UserRequestDto, UserUpdateRequestDto } from '../dto/user-request.dto';
import { UserApiResponseDto, UserResponse } from '../dto/user-response.dto';
import { UploadFileService } from './updaload-file.service';
import { OtpFlowService } from 'src/notifications/services/otp-flow.service';
import { OtpRepository } from 'src/notifications/repository/otp.repository';
import { PhoneNumberExists } from '../dto/phone-number-exists.dto';
import { WalletBridge } from 'src/wallet/services/wallet.queue';
export declare class UsersService {
    private tokenService;
    private configService;
    private walletService;
    private merchantClientService;
    private cardService;
    private _connection;
    private uploadFileService;
    private otpFlowService;
    private otpRepository;
    private readonly walletBridge;
    private userRepository;
    private documentRepository;
    private readonly saltRounds;
    constructor(tokenService: TokenService, configService: ConfigService, walletService: WalletService, merchantClientService: MerchantClientService, cardService: CardsService, _connection: DataSource, uploadFileService: UploadFileService, otpFlowService: OtpFlowService, otpRepository: OtpRepository, walletBridge: WalletBridge, userRepository: Repository<User>, documentRepository: Repository<UserDocument>);
    registerUser(userRequestDto: UserRequestDto): Promise<UserResponse>;
    validateRefferelCode(referrelCode: string | null, queryRunner: QueryRunner): Promise<User>;
    registerUserAndGenerateToken(userRequestDto: UserRequestDto): Promise<UserApiResponseDto>;
    registerAdminAndGenerateToken(userRequestDto: UserAdminRequestDto): Promise<UserApiResponseDto>;
    updateUserProfile(userId: string, userRequestDto: UserUpdateRequestDto): Promise<User>;
    checkPhoneNumberExists(phoneNumber: string): Promise<PhoneNumberExists>;
    getAllUsers(userId: string): Promise<UserResponse[]>;
    addProfileIconInUserResponse(userModel: User, userResponse: UserResponse): Promise<UserResponse>;
    setPin(userId: string, pin: string): Promise<void>;
    verifyPin(userId: string, pin: string): Promise<boolean>;
    validateUserCardAssignment(userId: string, otp: string): Promise<import("src/core/entities/card.entity").Card>;
    updateUserKycStatus(userId: string, updateKycStatus: keyof typeof KycVerificationStatus): Promise<string>;
    handleKycEvent(cardHolderId: string, kycStatus: string): Promise<void>;
    getUsersByKycStatus(kycStatus: keyof typeof KycVerificationStatus): Promise<UserResponse[]>;
    getKycStatusOfUser(userId: string): Promise<string>;
    findUserById(userId: string): Promise<User>;
    sendVerificationCode(userId: string): Promise<void>;
    verifyCodeAndUpdateUserPin(userId: string, otp: string, pin: string): Promise<{
        message: string;
    }>;
    updateUserKycDetails(userId: string, fileInfos: UpdateKycDetailUploadDto[]): Promise<boolean>;
    private isKycVerificationDocumentsUploaded;
    getUserDocuments(userId: string): Promise<{}>;
    getUserProfile(userId: string): Promise<User>;
    saveDocumentInfo(fileInfo: UpdateKycDetailUploadDto, userInfo: User, documentInfo?: UserDocument, entityManager?: EntityManager): Promise<boolean>;
    updateProfileIcon(userId: string, file: Express.Multer.File): Promise<{
        message: string;
        fileUrl: string;
    }>;
}

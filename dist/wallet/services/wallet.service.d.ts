import { Order, OrderStatus, OrderType } from 'src/core/entities/order.entity';
import { Transaction, TransactionStatus } from 'src/core/entities/transactions.entity';
import { User } from 'src/core/entities/user.entity';
import { Wallet } from 'src/core/entities/wallet.entity';
import { TransactionNotifyPayload } from 'src/integration/busybox/external/interfaces/transaction-notify.interface';
import { NotificationBridge } from 'src/notifications/services/notification-bridge';
import { TransactionType } from 'src/transactions/enum/transaction-type.enum';
import { TransactionsService } from 'src/transactions/services/transactions.service';
import { DataSource, FindOptionsWhere, QueryRunner, Repository } from 'typeorm';
import { CreateWalletDto } from '../dto/create-wallet.dto';
import { AddMoneyThroughPGDTO, AddMoneyToWalletDto, DeductWalletBalanceRechargeDto, TransferMoneyDto } from '../dto/transfer-money.dto';
import { CoinTransactionService } from 'src/coins/coins.service';
import { CoinTransaction } from 'src/core/entities/coins.entity';
export declare class WalletService {
    private walletRepository;
    private _connection;
    private readonly transactionsService;
    private userRepository;
    private orderRepository;
    private transactionRepo;
    private readonly notificationBridge;
    private coinsService;
    constructor(walletRepository: Repository<Wallet>, _connection: DataSource, transactionsService: TransactionsService, userRepository: Repository<User>, orderRepository: Repository<Order>, transactionRepo: Repository<Transaction>, notificationBridge: NotificationBridge, coinsService: CoinTransactionService);
    private handleTransaction;
    private findUserById;
    private findWalletByUserId;
    private updateWalletBalance;
    createWallet(createWalletDto: CreateWalletDto, queryRunner: QueryRunner): Promise<Wallet>;
    getOne(query: FindOptionsWhere<Wallet>): Promise<Wallet>;
    getWallet(query: FindOptionsWhere<Wallet>): Promise<{
        email: string;
        firstName: string;
        lastName: string;
        updatedAt: Date;
        id: number;
        balance: number;
        status: string;
        walletAccountNo: string;
    }>;
    getWalletQRCode(query: FindOptionsWhere<Wallet>): Promise<string>;
    generateWalletAccountNo(): Promise<string>;
    UpdateMoneyToWallet(addMoneyWalletDto: AddMoneyToWalletDto, userId: string): Promise<Wallet>;
    debitMyAccount(fundMyAccountDto: AddMoneyToWalletDto, req: any): Promise<Wallet>;
    debitAmountOnCardTransaction(cardTransaction: TransactionNotifyPayload): Promise<Wallet>;
    processFundTransfer(transferAccountDto: TransferMoneyDto, req: any): Promise<Wallet>;
    processRechargePayment(deductBalanceData: DeductWalletBalanceRechargeDto, userId: string): Promise<Wallet>;
    processPaymentGatewaySuccess(addMoneyDto: AddMoneyThroughPGDTO, userId: string): Promise<Wallet>;
    processRechargeRefundPayment(orderId: string): Promise<Wallet>;
    processRechargeSuccess(orderId: string, transactionId: string, gatewayId: string): Promise<boolean>;
    processLoanPayment(deductBalanceData: DeductWalletBalanceRechargeDto, userId: string): Promise<Wallet>;
    handleReferrelBonus(referrerUserId: string, refreeId: string): Promise<void>;
    handleCoinRedeem(data: CoinTransaction): Promise<Wallet>;
    private createAndSaveReferralOrder;
    private createAndSaveCashbackOrder;
    private createReferralTransactions;
    private sendReferralBonusNotification;
    getNewReferelOrder(amount: number, user: User): {
        order_id: string;
        order_type: OrderType;
        gateway_response: string;
        amount: number;
        status: OrderStatus;
        transaction_id: string;
        user: User;
        description: string;
        payment_method: string;
        paymentMode: string;
        respectiveUserName: string;
        ifscNumber: string;
        accountId: string;
    };
    getNewCashbackOrder(amount: number, user: User): {
        order_id: string;
        order_type: OrderType;
        gateway_response: string;
        amount: number;
        status: OrderStatus;
        transaction_id: string;
        user: User;
        description: string;
        payment_method: string;
        paymentMode: string;
        respectiveUserName: string;
        ifscNumber: string;
        accountId: string;
    };
    getReferrelBonus(): number;
    getTransactionModelForReferrel(receiver: User, referenceId: string, transactionType: TransactionType, wallet: Wallet, amount: number, sender: User, serviceUsed: string): {
        transactionHash: string;
        reference: string;
        user: User;
        description: string;
        status: TransactionStatus;
        type: TransactionType;
        amount: number;
        transactionDate: Date;
        walletBalanceBefore: number;
        walletBalanceAfter: number;
        wallet: Wallet;
        sender: string;
        receiver: string;
        serviceUsed: string;
    };
}
